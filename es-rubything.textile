%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Start off with some headers

Title: Taller de Ruby/Rails
Author: DevChix Uruguay y Amigos
Generator: text

%css

body {
    font-family: 'Helvetica Neue', Helvetica, sans-serif;
}

.slide h2 {
    font-size: 24pt;
}

table td {
    padding: .5em;
    border: 1px solid #ccc;
}

%end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Start Presentation

h1. Aprendiendo Ruby and Rails

Buenos Días!

h1. Presentaciones

* Devchix : devchix@ y www.devchix.com
* RailsBridge en la comunidad Ruby/Rails
* PyStar en la comunidad Python
* En Montevideo gente de Cubox, WyeWorks y Moove-it

h1. Agenda del Día

* 9:00 *Presentaciones*
* 9:30 - 13:00 *Instalación del ambiente de trabajo*
* 10:30 -11:30 *Introduction to Ruby*
* 11:30 -12:00 *Ruby Koans*
* 12:00 -1:00 *Almuerzo*
* 1:00 - *Rails parte 1*
* 2:45 -3:00 *Descanso*
* 3:00 -4:30 *Rails parte 2*
* 4:30 *Y ahora? Contribuyendo con Rails*

h1. Qué Temas Vamos a Cubrir?

* La historia de Ruby
* Instalando el ambiente de trabajo
* Sintaxis y operaciones simples en Ruby
** Objectos, clases y metodos
** Bloques y estructuras de control
** Metaprogramming, tainting, reflection y marshaling // ver como colocar esta parte, solo una idea de que esto existe
* Testing en Ruby
* Una introducción a Rails
** Cómo usar la maquinaria de Rails para manipular datos en la aplicación** Validación de datos en Rails
** Mostrando datos en Rails
** Usando scaffolding para comenzar una aplicación simple

h1. La historia de Ruby
* Yukihiro "Matz" Matsumoto es el creador de Ruby.
* Contexto frente a otros lenguajes que puedan estar usando
* Ruby es un lenguaje interpretado 
* Ruby es un lenguaje orientado a objetos
* Diferentes implementaciones del lenguaje (mri, jruby, rubinius, ree, etc)

h1. Porque Ruby?

* Fácil de aprender
* La comunidad de Ruby en Montevideo está creciendo
* La comunidad tiene un sistema de documentación standard (RDoc)
* Tiene RubyGems que es el sistema usado para empaquetar y distribuir código Ruby
* Rails es un web framework bastante popular construido sobre Ruby
* En 10 años se han agregado una gran cantidad de clases y modulos nativos al lenguaje.
* Tiene buenas herramientas para testing como RSpec y Cucumber.
* Para este taller usaremos Ruby 1.9 pues se ha expandido mucho en comparación con la versión 1.8.7

h1. Instalando el ambiente de trabajo

* Todos se sienten comodos manejando una terminal?
* En linux ó Mac (tener el sistema actualizado e instalado curl y git)
** RVM: Te permite manejar multiples interpretes de Ruby en la misma máquina y fácilmente cambiar entre versiones.
*** @bash < <( curl http://rvm.beginrescueend.com/releasesl/rvm-install-head )@
*** Seguir las instrucciones para agregar rvm al .bashrc
*** @source $HOME/.rvm/scripts/rvm@
*** @rvm notes@
* En Windows hay que instalar primero Ruby
** Ruby: Vamos a usar la version 1.9.2 y el interprete MRI
*** Ir a http://rubyinstaller.org y descargar la versión de Ruby mediante el botón Download. 
*** Ejecutarla y comenzar la intalación

h1. Instalando el ambiente de trabajo

* En Linux ó Mac
** Ruby: para este taller usaremos mri y la versión 1.9.2
*** @rvm install 1.9.2@
*** mirar rvm help para ver que más se puede hacer
* En Windows
** PIK: Te permite manejar multiples interpretes de Ruby en la misma máquina y fácilmente cambiar entre versiones.
*** Descargar la última versión http://github.com/vertiginous/pik/downloads
*** Seguir los pasos de la instalación
*** Deslogueate o reinicia windows para integrar pik al ambiente.
*** En una terminal
**** @pik add@
**** @pik list@
**** @pik use 192@
**** @ruby -v@

h1. Instalando el ambiente de trabajo

* Rails: Vamos a usar la version 3.XX
** En Linux
** En Windows
** En Mac

* Editores
** VIM y plugins para ruby/rails
** Textmate
** Emacs
** Gedit
** Eclipse?
** NetBeans

h1.  Abriendo el interprete de Ruby

%TODO Ver donde nombrar ri para la documentación...

Abrir una terminal y ejecutar irb. También existe pry y pueden bajarlo desde XXX. %TODO Nombrar algunas diferencias.

Jugar un poco:

bc. 1
4 + 3 
"hat" 
[1, 2, 3, "happy"].each { |i| puts i }

@>>@ es donde ingresas comandos y en @=>@ va a aparecer la respuesta.

irb tiene un historial de comandos. Usen las flechitas para navegarlo.

h1. Datos Básicos de Ruby

% TODO more table

|Integers| @1@, @2@, @3@ |
|Strings | @"chicken"@ |
|Booleans| @true@, @false@ |
|Symbols | @:chicken@ |
|Arrays  | @[1, 7, "cake"]@ |
|Hashes  | @{:chicken => "chicken", :sillyexample => :chicken}@ |

En Ruby TODO es un objeto. El tipo del objeto es definido por lo que el objeto puede hacer. A esto le llamamos "duck typing". Si un objeto camina como un pato y habla como un pato, entonces el interprete lo trata como un pato.

Juega con la terminal!

h1. Operaciones Basicas en Ruby

| @2 + 2@ | |
| @3 * 3@ | |
| @"chicken".reverse@ | |
| @"chicken".length@  | |
| @2 + 2 == 4@ | |
| @2 + 2 == 5@ | |
| @[1 , 2, 3].include?(2)@ | | |

h1. Operaciones Basicas en Ruby

| @2 + 2@ | @4@ |
| @3 * 3@ | |
| @"chicken".reverse@ | |
| @"chicken".length@  | |
| @2 + 2 == 4@ | |
| @2 + 2 == 5@ | |
| @[1 , 2, 3].include?(2)@ | | |

h1. Operaciones basicas en ruby

| @2 + 2@ | @4@ |
| @3 * 3@ | @9@ |
| @"chicken".reverse@ | |
| @"chicken".length@  | |
| @2 + 2 == 4@ | |
| @2 + 2 == 5@ | |
| @[1 , 2, 3].include?(2)@ | | |

h1. Operaciones basicas en ruby

| @2 + 2@ | @4@ |
| @3 * 3@ | @9@ |
| @"chicken".reverse@ | @"nekcihc"@ |
| @"chicken".length@  | |
| @2 + 2 == 4@ | |
| @2 + 2 == 5@ | |
| @[1 , 2, 3].include?(2)@ | | |


h1. Operaciones basicas en ruby

| @2 + 2@ | @4@ |
| @3 * 3@ | @9@ |
| @"chicken".reverse@ | @"nekcihc"@ |
| @"chicken".length@  | @7@ |
| @2 + 2 == 4@ | |
| @2 + 2 == 5@ | |
| @[1 , 2, 3].include?(2)@ | | |


h1. Operaciones basicas en ruby

| @2 + 2@ | @4@ |
| @3 * 3@ | @9@ |
| @"chicken".reverse@ | @"nekcihc"@ |
| @"chicken".length@  | @7@ |
| @2 + 2 == 4@ | @true@ |
| @2 + 2 == 5@ | |
| @[1, 2, 3].include?(2)@ | | |


h1. Operaciones basicas en ruby

| @2 + 2@ | @4@ |
| @3 * 3@ | @9@ |
| @"chicken".reverse@ | @"nekcihc"@ |
| @"chicken".length@  | @7@ |
| @2 + 2 == 4@ | @true@ |
| @2 + 2 == 5@ | @false@ |
| @[1, 2, 3].include?(2)@ | |  |

h1. Operaciones basicas en ruby

| @2 + 2@ | @4@ |
| @3 * 3@ | @9@ |
| @"chicken".reverse@ | @"nekcihc"@ |
| @"chicken".length@  | @7@ |
| @2 + 2 == 4@ | @true@ |
| @2 + 2 == 5@ | @false@ |
| @[1, 2, 3].include?(2)@ | | @true@ |

Y que es lo que hace @"chicken".reverse.length@ ?
Y @"puppy".include?("p")@?

h1. Interlude: String Interpolation

%TODO Decidir si sacar este slide o no

Something you might want to do is print out a string that has a value
contained within it.

For example, try typing

@"Our array is #{[1,2,3]}"@

Most useful when dealing with variables!

bc. var = [1,2,3,4,5,6]
"Our array is #{var}"

Now back to variables!

h1. Variables

Qué pasa en cada paso?

bc. thing = "chicken"
thing
thing.reverse
thing
thing = thing.reverse

h1. Variables

Intenten.

bc. awesomelist = [5,2,1,8]
awesomelist.sort!
awesomelist

Como paso esto? Acciones que terminen con un @!@ "cambian" los datos!
Esto es una convención de Ruby, pero una buena a seguir.

h1. Hashes

Consideremos un sistema de rating de libros:
* Usamos valores numericos 0-5 para valorar un libro que hemos leido.
* 0 va a representar un libro que aún no ha sido rated
* Vamos a guardar los datos en un hash.

Crea un hash y agregale algunos libros, por ejemplo:

bc. books = { "Left Hand of Darkness"        => 5,
          "The Word for World Is Forest" => 5,
          "Nevermind the Pollacks"       => 0,
          "Only Revolutions"             => :not_rated }

h1. Hashes

Podemos obtener el rating de un libro en particular con

@books["Left Hand of Darkness"]@

También podemos *setear* valores con

@books["Only Revolutions"] = 3@

Agregamos un libro de la misma forma

@books["White Teeth"] = 4@

Y con @books@ vemos todo el hash

Jueguen con el hash en irb

h1. Probemos

@40.reverse@

Qué pasa?

Ruby dijo @NoMethodError: undefined method `reverse' for 40:Fixnum@

Significa que @reverse@ no es un metodo que puedamos aplicar al número 40.
h1. Metodos

Los metodos son invocados al enviarles un mensaje al objeto. El mensaje contiene el nombre del metodo asi como cualquier parametro que este necesite.

Si quieren ver los metodos de un objeto pueden escribir @40.methods.sort@

Jueguen con el hash en la consola de ruby.

h1. Objetos

Nuevamente, todo lo que manipulas en Ruby es un objeto y los resultados de esas manipulaciones tambien son objetos. Y cada objeto tiene un identificador único.

Un objeto son los datos asi como tambien los metodos que se le puede aplicar.

Como sabemos de qu tipo es un objeto? Sólo hay qu prguntarle!

@40.class@

Qué *es* una Clase?

h1. Classes

% TODO wording of templates, descriptions

* Classes are templates for making objects
* Classes create different types of objects
** All numbers can be added
** All strings can be reversed
* They define kinds of data and methods on that data


h1. Classes & Methods

Let's learn the syntax by example:

bc.. class Counter
end

p. What can we do with @Counter@?

@c = Counter.new@

% Step 1 %

h1. Classes & Methods

Let's learn the syntax by example:

bc.. class Counter
attr_accessor :value

end

p. Now try

bc. c = Counter.new
c.value
c.value = 10
c.value

What happened? What does @attr_accessor :value@ do?

h1. Classes & Methods

Let's learn the syntax by example:

bc.. class Counter
  attr_accessor :value

  def initialize
    @value = 0
  end

end

p. Now, again, try

bc. c = Counter.new
c.value

@initialize@ gives @new@ instructions on how to create an object

% Step 2 %

h1. Classes & Methods

Let's learn the syntax by example:

bc.. class Counter
  attr_accessor :value

  def initialize
    @value = 0
  end

  def increment
    @value = @value + 1
  end

end

% Step 4 %

h1. Classes

Let's use our Counter class:

bc. count = Counter.new
count.increment
count.increment
count.value

bc. count.class
count.methods

% change to use respond_to? , have a note about what respond_to? does in speech

Try @count.respond_to?("increment")@. What did you see?

h1. Class Exercise

Let's add a @Counter.increment_by@ method that takes an *argument* for how much to increment.

Don't need to start all over - we *open* the class instead

bc.. class Counter

def increment_by(n)
  # fill in here
end

end

p. Test your code as follows:

bc. c = Counter.new
c.increment_by(5)
c.value

h1. Classes

You can add methods to existing classes as well:

bc. class String
  def chicken?
    self == "chicken"
  end
end

bc. "chicken".chicken?
"puppy".chicken?

@self@ is a way of referring to the object that the method is being called on.

In @"puppy".chicken?@, @self@ is @"puppy"@.

h1. Classes Exercise

Add a method to String that will test to see if a string is a palindrome.

A palindrome is any string that is the same read forwards or backwards.

To get you started type the following at the command line:

bc. class String
  def palindrome?

and finish the rest! Test it on @"abba".palindrome?@ and @"puppy".palindrome?@

h1. Learn more about common Ruby classes

"http://rubydoc.info/stdlib/core/":http://rubydoc.info/stdlib/core

Good places to start: Array, Enumerable, Fixnum, Float, Hash, NilClass, String, Time

h1. Blocks

% introduce blocks by example first then explain what
% they are - have other examples of block usage first, sort_by and map as
% well as just each
% pull up array documentation or something like that in terms of showing
% OH HAI some methods take blocks

Some methods take blocks.

@list.each {|p| code}@ runs @code@ on every element of @list@

bc. list = [1,2,3,4]
list.each { |n| puts (n + 1) }

* A *block* is a computation, but *not* a method
* A block is of the form @{ |arg1, arg2, ..| code }@
* @{ |v| v.palindrome? }@
* @{ |x, y| x * y }@

h1. Blocks

% TODO different block iterator than the previous things, something more complicated

A more complicated example of using each:

bc. reviews = Hash.new(0)
books.values.each { |rate| reviews[rate] = reviews[rate] + 1 }
reviews

@reviews@ is a count of how many reviews you gave with a particular rating

@reviews[5]@

h1. Blocks

There's another way to write blocks. This is commonly used for multi-line expressions.

bc. reviews = Hash.new(0)
books.values.each do |rate|
  reviews[rate] = reviews[rate] + 1
  # more code can go here...
end

h1. Control Structures

Ruby provides control structures for writing more complicated code.

If statements are a switch on whether the argument is true or false.

bc.. if true
  1
else 
  2
end

bc.. if false
  1
else 
  2
end

h1. Control Structures

Case statements evaluate a statement and execute the code in the corresponding branch:

bc. case favorite_color
when "green"
  puts "Grass is green"
when "blue"
  puts "Skies are blue"
when "red"
  puts "Tomatoes are red"
else
  puts "Are you sure that's a color?"
end

h1. Control Structures

% TODO LOSE THIS IN FAVOR OF CASE OR SOMETHING MORE USEFUL

For-in statements allow iteration over a structure such as a list

bc. list = [1,2,3,4,5]
sum = 0
for n in list
  sum = sum + n
end
sum

h1. Koans

"Ruby Koans":http://rubykoans.com/

h1. Intro To Rails

* Rails is a framework for building and deploying web applications
* It's structured using an architecture called MVC: Model-View-Controller
* MVC separates different kinds of application logic into sections based on what it's used for. In Rails, these live in separate folders.
* Rails values "convention over configuration"--the platform will make certain assumptions about how you're going to build your application. This makes tasks that suit Rails' conventions very easy, but actions that don't follow these conventions will take more work.

h1. An Example Rails App

To get started:

# Go to the microrant directory
# Type @bundle install@
# Then type @rails server@
# Open "http://localhost:3000":http://localhost:3000 in your web browser

% (directions for how to run this application and what to do with it as
% examples - need a script for manipulating it in the web browser.
% Need examples of 
% # Viewing data
% # Creating data
% # Modifying data
% # Destroying data
% End with the Gospel(in the old German sense) of Rails: much of the code
% needed to do those things can automatically be created by rails
% ) -->

h1. Microrant

* Twitter? Never heard of it.
* 10 characters to express your anger
* Basic activities: create, read, update, delete (CRUD)
* Go to http://localhost:3000/users/new to create a new user with your name
* Then go to /rants/new and create a new rant
** Rants can also be edited and deleted--give it a try!

* What's behind the curtain?
** Rails provides classes that allow us to retrieve and manipulate data easily 
** Logic for the application is written in normal Ruby, and a module called ActiveRecord does all of the database connection work for you

h1. Behind the Scenes: the database

% Describe what a database is, and talk about how the items they're creating are stored in tables %

h1. At The Console

* Close down the Rails server with Ctrl-C
* Run @rails console@
* You can modify the data using @Rant@ and @User@ classes
* The @User@ class has @id@ and @name@ attributes
* The @Rant@ class has @id@, @message@, and @user_id@ attributes

h1. At The Console

How can we look up a rant after it's been created?

bc. r = Rant.find(1)
r.message
r.user_id

What about modifying a rant?

bc. r.message = "RANTING!"
r.save

We need to @save@ the changes when we're done editing.

h1. Where's My Stuff

Rails models have built-in finder methods that help you retrieve records from the database.

Try:
* @Rant.all@
* @Rant.order("created_at DESC")@
* @Rant.first@
* @Rant.where("user_id = 1")@
* @Rant.where(:user_id => 1)@

h1. At the Console

Let's try creating a new Rant, for @user_id@ 1

bc. user = User.find(1)
rant = user.rants.build
rant.message = "WHAT IS TH"
rant.save

Note that we didn't need to set the @id@ field of the message!
That was automatically set by @new@. 

We @save@ the record when we're done, in order to create it, just like when we were editing a rant before.

h1. At The Console

Creating a rant that way was verbose. Is there a better way?

@User.find(1).rants.create(:message => "E POINT!?")@

Notice that you don't need to save when you use @create@--it combines @new@ and @save@ into a single action.

h1. Looking at models

Open up the user.rb and rant.rb model files.

bc.. class Rant < ActiveRecord::Base

  belongs_to :user

  validates :user, :presence => true
  validates :message, :presence => true, :length => { :maximum => 10 }

end

class User < ActiveRecord::Base

  has_many :rants
  
  validates :name, :presence => true

end

% Instructor should walk through what each part of the model does, including explaining belongs_to and has_many associations %

h1. Exercises

Some people are writing in lowercase! This won't do!

Let's write a method that can convert all lowercase rants to uppercase. First, go find the rant.rb file in your Rails models directory.

bc. class Rant < ActiveRecord::Base
before_save :convert_message_to_uppercase
def convert_message_to_uppercase
  ...

Rails provides many extensions to Ruby classes to make common tasks easier. Look in "http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Chars.html":http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Chars.html to find the helper you need for this exercise.

Once you've added the code, try creating a lowercase rant and see what happens.

h1. Exercises

Sometimes you want to work with your data in a different format. Go back to the Rails console and write a program that creates a hash that contains rant messages paired with user names.

How do you create a new Hash again?
* Earlier we saw @Hash.new@, but @{}@ is a simpler way.
* Try @new_hash = {}@

The result should look like:

bc. => {"RANTING!"=>"caylee", "WTF"=>"audrey"}

Can you use an iterator to print this out as a series of formatted strings?

% Bonus exercise: amend your code to print out each pair in a formatted string (you'll need an iteration loop like for..each and the Ruby function @puts@ to print out each line). %

% TODO NOTE - have example output for the exercises, more guidance for how to get
% started, e.g. showing how to define the Hash

h1. Callbacks

The @before_save@ code we wrote earlier uses a *callback*. Rails defines several callbacks that allow you to change the input to a model before or after actions like save, create, update, and delete.

bc. before_save :geocode_address
after_create :notify_admins
before_validate :check_over_some_other_details

h1. Quality Control

Validations provide an easy wrapper for checking that a particular attribute is present, in the right format, or other requirements before the application will save the data. The microblog application already contains some of these. Look at the Rant and User models to see the ones we've included.

Can you think of other validations you'd like to add? Try changing the length of a valid Rant message.

% TODO split into two slides [DONE]
% callback slide, slide on validations - explain validations as constraints
% example code with validations/showing actual code

h1. Displaying the data

Rails will automatically create views with content when you use the @scaffold@ command. Go to /app/views and have a look around.

These files are making use of a templating system called ERB that converts Ruby statements in the view into static HTML to display. A typical ERB statement might look like:

% TODO: figure out how to display this without getting clobbered by slideshow's parser %

Documentation on ERB syntax: "http://ruby-doc.org/stdlib/libdoc/erb/rdoc/classes/ERB.html":http://ruby-doc.org/stdlib/libdoc/erb/rdoc/classes/ERB.html

h1. Exercises

The scaffolding system is quick to use, but not always pretty. Our list of rants lists the @user_id@ for the person who said it, and not their name. Let's change that.

Go to /app/views/rants/ and open the index.html file. By default, the scaffolder makes the index view show a list of all records of the related model's type. Find the line that displays the user id and change it to show the user's name instead.

% Instructional note: this may require explaining that you can chain method calls to get rant.user.name %

h1. Exercises

On the users index page, let's add a column to the table to show how many rants each person has written. ActiveRecord makes this easy by providing a method called @count@ that you can add to a collection of records to get the database count instead of the full records. For example, @User.count@ or @Rants.count@.

These also work through has_many associations, so given a particular user record, you could try @user.kittens.count@ or @user.books.count@ (if those associations existed) or ...

% TODO Add, in addition, a calculation for who has written the most rants
% and a message that says "Congrats, <name>, you're the angriest person here!"
% AE note - this might be a good one for people moving fast, but the way I would probably recommend doing it is involved enough I'd keep this as a bonus exercise only %

h1. Routes

How does Rails know what page to go to when you visit "http://localhost:3000/rants/new":http://localhost:3000/rants/new ?

Open /config/routes.rb to see how this works.

h1. What about the C in MVC?

Now that we've seen and edited models and views, let's take a quick look at the controller files in our project.

What does a controller do?
* It connects the view and the model, calling methods on the models to get the data needed for the view, and allowing you to access input parameters, such as those from a form.
* It responds to the HTTP request from the browser, and renders the requested type of output (in our scaffolds, this is html or xml, but other things like json can easily be added--instant API!)
* The controller is also where you would add access control, like only allowing the user who wrote the rant to delete it.

h1. Making Your Own

* Exit @microrant@ directory
* Run @rails new betterrant@
* Enter the betterrant directory and run:

bc. bundle install
rails generate scaffold User name:string
rails generate scaffold Rant user_id:integer message:string
rake db:migrate

At this point you can start the server and take a look around.

h1. Summary

* We've reviewed the basics of the Ruby language
** For a refresher, "Try Ruby":http://tryruby.org/ is a browser based overview of Ruby
** Ruby has a number of simple types of data such as strings, numbers, arrays, and hashes
** Most computations in Ruby are handled by methods.
** A class is a template for creating objects that bundles data and methods
** Classes can be extended as new needs arise

h1. Summary

* We've covered a small Rails application: microrants
** A good next tutorial is "Rails For Zombies":http://railsforzombies.org/
** More detail can be found in the "Ruby Guides":http://guides.rubyonrails.org/
** ActiveRecord allows us to manipulate our persistent data like normal objects
** .erb files allow us to intergrate Ruby code with html
** Scaffolding gives a way of automating the start of a Rails project

h1. Next Steps

* Try to make betterrant match or improve upon microrant
* Participa en el grupo de Ruby de Uruguay
* Otros recursos:
** PickAxe es un clásico entre los libros para aprender Ruby. Pueden encontrarlo en <a href="http://pragprog.com">http://pragprog.com</a>
** Web RubyLang para ver lo último de Ruby: <a href="http://www.ruby-lang.org">http://www.ruby-lang.org</a>
** La documentación de Ruby <a href="http://www.ruby-doc.org">http://www.ruby-doc.org</a>
** Mailing Lists 
*** ruby-sur@ ?
*** ruby-uruguay@ ?
*** ruby-talk@ruby-lang.org (en ingles)
*** ruby-doc@ruby-lang.org (en ingles) sobre documentación
*** ruby-core@ruby-lang.org (en ingles) sobre implemantación del core de ruby
*** ruby-dev@ruby-lang.org (en ingles) para desarrolladores de ruby
*** muchos más en mailing lists en www.ruby-lang.org y archivo en www.ruby-talk.org
** User Groups
** IRC
** RubyConf Uruguay 2011 el próximo fin de semana.

% TODO what else should go here? mention some materials in the take-home packet?

h1. Contribuir con Ruby y con Rails

* Reportar Bugs en Ruby
** El tracking system está en http://redmine.ruby-lang.org
** Antes de reportarlo navega los bugs ya reportados para ver si tu bug ya existe. También proba nuevas versiones de ruby por si eso lo soluciona.
** También es una buena idea enviar una pregunta sobre el bug a la lista de correo ruby-talk.
** Cuando envias un bug es una buena idea incluir el resultado de ejecutar ruby -v, el sistema operativo y además la problematica del código.
* Ayudar con la documentación
** Hacer traducción
** Mejorar la documentación
** Hay un sistema llamado RDoc
** ri es un visor en la consola para esa misma documentación
*** Tipea ri ClassName para encontrar la documentación de esa clase
